<?xml version="1.0"?>
<!--
Copyright (c) 2017 IBM Corp.

This program and the accompanying materials are made available under the
terms of the Eclipse Public License 2.0 which accompanies this distribution
and is available at http://eclipse.org/legal/epl-2.0 or the Apache License, 
Version 2.0 which accompanies this distribution and is available at 
https://www.apache.org/licenses/LICENSE-2.0.

This Source Code may also be made available under the following Secondary
Licenses when the conditions for such availability set forth in the 
Eclipse Public License, v. 2.0 are satisfied: GNU General Public License,
version 2 with the GNU Classpath Exception [1] and GNU General Public License,
version 2 with the OpenJDK Assembly Exception [2].

[1] https://www.gnu.org/software/classpath/license.html
[2] http://openjdk.java.net/legal/assembly-exception.html

SPDX-License-Identifier: EPL-2.0 OR Apache-2.0 OR GPL-2.0 WITH Classpath-exception-2.0 OR LicenseRef-GPL-2.0 WITH Assembly-exception
-->

<project name="openj9.test.daa" default="build">

	<!-- Set default for source_root.  -->
	<property name="source_root" location="../"/>

	<!-- Set default for STF location.  -->
	<!-- Assumes source repositories are checked out under a common root - e.g. and the repository
		has been built in-situ - i.e.
		stf repository: /home/userid/git/stf
		java.svt repository: /home/userid/git/java.svt
		If the stf repository has been cloned or built to a different location, the stf_root property
		must be set on the command line - e.g. -Dstf_root=/my_stf_build_dir
	-->
	<property name="stf_root" location="${source_root}/../stf"/>

	<!-- Import settings used by multiple projects.  -->
	<import file="${source_root}/openj9.build/include/top.xml"/>

	<!-- For modularity you need a directory above the package structure to hold the module.java file -->
	<property name="module" value="test.daa" />
	<property name="src_dir" value="src/${module}" />
	<property name="bin_dir" value="bin" />

	<property name="jar_file" value="${bin_dir}/${module}.jar" />

	<!-- We need junit and stf to compile this project. -->
	<path id="project.class.path">
		<path refid="junit.class.path" />
		<path refid="stf.class.path" />
	</path>

	<!-- Projects which need to be built before this one. -->
	<!-- dir must be set on the ant task otherwise the basedir property is not set to a new value in the subant task. -->
	<target name="build-dependencies">
		<!-- <ant antfile="${stf_root}/stf.build/build.xml" dir="${stf_root}/stf.build" inheritAll="false"/> -->
	</target>

	<target name="build" depends="build-no-natives, build-natives">
	</target>

	<target name="build-no-natives" depends="build-dependencies, check-prereqs, build-archives">
	</target>

	<target name="build-natives">
	</target>

	<target name="build-archives" depends="build-jar">
	</target>

	<target name="build-jar" depends="build-java, create-bin-dir">
		<jar destfile="${jar_file}">
			<fileset dir="${bin_dir}" includes="**/*.class" />
		</jar>
	</target>

	<target name="build-java" depends="check-prereqs, create-bin-dir">
		 <!--
		 	The Ant javac task only checks time dependencies between .java files and their .class files,
			so fails to recompile in situations such as the signatures of a dependent method changing.
			The depend target checks the dependencies and deletes any .class files older than the files
			which depend on them, thereby ensuring recompilation.
		-->
		<depend srcdir="${src_dir}" destdir="${bin_dir}" classpathref="project.class.path">
			<include name="**/*.java"/>
		</depend>
		<javac srcdir="${src_dir}"
			   destdir="${bin_dir}"
			   fork="true"
			   executable="${java8_compiler}"
			   debug="true"
			   classpathref="project.class.path"
			   encoding="UTF-8"
			   includeantruntime="false"
			   failonerror="true">
			<include name="**/*.java"/>
		</javac>
	</target>

	<target name="create-bin-dir">
		<mkdir dir="${bin_dir}"/>
	</target>

	<target name="clean">
		<delete dir="${bin_dir}"/>
	</target>

</project>
